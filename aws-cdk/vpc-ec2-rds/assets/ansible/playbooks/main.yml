---
- name: Configure Web Server
  hosts: localhost
  become: yes
  gather_facts: yes
  vars:
    db_name: training
    db_user: postgres
    db_password: postgres
    nginx_conf: |
      user nginx;
      worker_processes auto;
      error_log /var/log/nginx/error.log;
      pid /run/nginx.pid;

      events {
          worker_connections 1024;
      }

      http {
          log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                          '$status $body_bytes_sent "$http_referer" '
                          '"$http_user_agent" "$http_x_forwarded_for"';

          access_log  /var/log/nginx/access.log  main;

          sendfile            on;
          tcp_nopush          on;
          tcp_nodelay         on;
          keepalive_timeout   65;
          types_hash_max_size 4096;

          include             /etc/nginx/mime.types;
          default_type        application/octet-stream;

          server {
              listen       80;
              listen       [::]:80;
              server_name  _;
              root         /usr/share/nginx/html;

              location / {
              }

              error_page 404 /404.html;
              location = /404.html {
              }

              error_page 500 502 503 504 /50x.html;
              location = /50x.html {
              }
          }
      }
    pg_hba_conf: |
      # TYPE  DATABASE        USER            ADDRESS                 METHOD
      local   all            all                                     trust
      host    all            all             127.0.0.1/32            trust
      host    all            all             ::1/128                 trust
    pg_hba_conf_md5: |
      # TYPE  DATABASE        USER            ADDRESS                 METHOD
      local   all            all                                     md5
      host    all            all             127.0.0.1/32            md5
      host    all            all             ::1/128                 md5

  tasks:
    # System Update and Package Installation
    - name: Update all packages
      dnf:
        name: "*"
        state: latest
        update_cache: yes
      
    - name: Install NodeSource repository
      shell: |
        curl -fsSL https://rpm.nodesource.com/setup_20.x | bash -
      args:
        creates: /etc/yum.repos.d/nodesource-el8.repo
      
    - name: Install required packages
      dnf:
        name:
          - postgresql15-server
          - firewalld
          - nginx
          - nodejs
        state: present

    # PostgreSQL Configuration
    - name: Initialize PostgreSQL database
      command: postgresql-setup --initdb
      args:
        creates: /var/lib/pgsql/data/postgresql.conf

    - name: Configure pg_hba.conf
      copy:
        dest: /var/lib/pgsql/data/pg_hba.conf
        content: "{{ pg_hba_conf }}"
        owner: postgres
        group: postgres
        mode: '0600'

    - name: Start PostgreSQL service
      systemd:
        name: postgresql
        state: started
        enabled: yes

    - name: Check if database exists
      become_user: postgres
      environment:
        PGPASSWORD: "{{ db_password }}"
      shell: |
        psql -U {{ db_user }} -tAc "SELECT 1 FROM pg_database WHERE datname='{{ db_name }}'"
      register: db_exists
      changed_when: false

    - name: Check if password is set
      become_user: postgres
      environment:
        PGPASSWORD: "{{ db_password }}"
      shell: |
        psql -U {{ db_user }} -tAc "SELECT rolpassword FROM pg_authid WHERE rolname='{{ db_user }}'" | grep -q "^md5"
      register: password_set
      changed_when: false
      failed_when: false

    - name: Setup PostgreSQL
      become_user: postgres
      environment:
        PGPASSWORD: "{{ db_password }}"
      shell: |
        {% if not password_set.rc == 0 %}
        psql -U {{ db_user }} -c "ALTER USER {{ db_user }} WITH PASSWORD '{{ db_password }}';"
        {% endif %}
        {% if db_exists.stdout != "1" %}
        psql -U {{ db_user }} -c "CREATE DATABASE {{ db_name }};"
        {% endif %}
      register: db_setup
      failed_when: db_setup.rc != 0
      changed_when: db_setup.stdout != ""

    - name: Update pg_hba.conf for password authentication
      copy:
        dest: /var/lib/pgsql/data/pg_hba.conf
        content: "{{ pg_hba_conf_md5 }}"
        owner: postgres
        group: postgres
        mode: '0600'

    - name: Restart PostgreSQL
      systemd:
        name: postgresql
        state: restarted

    # Firewall Configuration
    - name: Start and enable firewalld
      systemd:
        name: firewalld
        state: started
        enabled: yes

    - name: Configure firewall
      shell: |
        sudo firewall-cmd --permanent --add-service={{ item }}
      loop:
        - http
        - https
      register: result
      changed_when: result.rc == 0
      ignore_errors: yes

    - name: Reload firewall
      shell: |
        sudo firewall-cmd --reload
      register: result
      changed_when: result.rc == 0

    - name: Check firewall configuration
      shell: |
        sudo firewall-cmd --list-all
      register: firewall_config
      changed_when: false

    - name: Display firewall configuration
      debug:
        var: firewall_config.stdout_lines

    # Nginx Configuration
    - name: Configure Nginx
      copy:
        dest: /etc/nginx/nginx.conf
        content: "{{ nginx_conf }}"

    - name: Start and enable Nginx
      systemd:
        name: nginx
        state: started
        enabled: yes
        daemon_reload: yes

    # Final Check
    - name: Check PostgreSQL databases
      become_user: postgres
      environment:
        PGPASSWORD: "{{ db_password }}"
      shell: |
        psql -U {{ db_user }} -c "\l"
      register: db_list
      changed_when: false