---
- name: Configure Web Server
  hosts: localhost
  become: yes
  gather_facts: yes
  vars:
    db_name: training
    db_user: postgres
    db_password: postgres
    pg_auth_method: trust  # 初期設定用

  tasks:
    # System Update and Package Installation
    - name: Update all packages
      dnf:
        name: "*"
        state: latest
        update_cache: yes
      
    - name: Install NodeSource repository
      shell: |
        curl -fsSL https://rpm.nodesource.com/setup_20.x | bash -
      args:
        creates: /etc/yum.repos.d/nodesource-el8.repo
      
    - name: Install required packages
      dnf:
        name:
          - postgresql15-server
          - firewalld
          - nginx
          - nodejs
        state: present

    # PostgreSQL Configuration
    - name: Initialize PostgreSQL database
      command: postgresql-setup --initdb
      args:
        creates: /var/lib/pgsql/data/postgresql.conf

    - name: Configure pg_hba.conf
      template:
        src: ../templates/pg_hba.conf.j2
        dest: /var/lib/pgsql/data/pg_hba.conf
        owner: postgres
        group: postgres
        mode: '0600'
      vars:
        pg_auth_method: trust

    - name: Start PostgreSQL service
      systemd:
        name: postgresql
        state: started
        enabled: yes

    - name: Check if database exists
      become_user: postgres
      environment:
        PGPASSWORD: "{{ db_password }}"
      shell: |
        psql -U {{ db_user }} -tAc "SELECT 1 FROM pg_database WHERE datname='{{ db_name }}'"
      register: db_exists
      changed_when: false

    - name: Check if password is set
      become_user: postgres
      environment:
        PGPASSWORD: "{{ db_password }}"
      shell: |
        psql -U {{ db_user }} -tAc "SELECT rolpassword FROM pg_authid WHERE rolname='{{ db_user }}'" | grep -q "^md5"
      register: password_set
      changed_when: false
      failed_when: false

    - name: Setup PostgreSQL
      become_user: postgres
      environment:
        PGPASSWORD: "{{ db_password }}"
      shell: |
        {% if not password_set.rc == 0 %}
        psql -U {{ db_user }} -c "ALTER USER {{ db_user }} WITH PASSWORD '{{ db_password }}';"
        {% endif %}
        {% if db_exists.stdout != "1" %}
        psql -U {{ db_user }} -c "CREATE DATABASE {{ db_name }};"
        {% endif %}
      register: db_setup
      failed_when: db_setup.rc != 0
      changed_when: db_setup.stdout != ""

    - name: Update pg_hba.conf for password authentication
      template:
        src: ../templates/pg_hba.conf.j2
        dest: /var/lib/pgsql/data/pg_hba.conf
        owner: postgres
        group: postgres
        mode: '0600'
      vars:
        pg_auth_method: md5

    - name: Restart PostgreSQL
      systemd:
        name: postgresql
        state: restarted

    # Firewall Configuration
    - name: Start and enable firewalld
      systemd:
        name: firewalld
        state: started
        enabled: yes

    - name: Configure firewall
      shell: |
        sudo firewall-cmd --permanent --add-service={{ item }}
      loop:
        - http
        - https
      register: result
      changed_when: result.rc == 0
      ignore_errors: yes

    - name: Reload firewall
      shell: |
        sudo firewall-cmd --reload
      register: result
      changed_when: result.rc == 0

    - name: Check firewall configuration
      shell: |
        sudo firewall-cmd --list-all
      register: firewall_config
      changed_when: false

    - name: Display firewall configuration
      debug:
        var: firewall_config.stdout_lines

    # Nginx Configuration
    - name: Configure Nginx
      template:
        src: ../templates/nginx.conf.j2
        dest: /etc/nginx/nginx.conf

    - name: Start and enable Nginx
      systemd:
        name: nginx
        state: started
        enabled: yes
        daemon_reload: yes

    # pgAdmin Installation
    - name: Install required dependencies
      dnf:
        name:
          - python3-pip
          - python3-devel
          - gcc
          - httpd
          - mod_ssl
          - postgresql15
        state: present

    - name: Install additional Python packages
      pip:
        name:
          - wheel
          - setuptools
        state: present

    - name: Create pgadmin user
      user:
        name: pgadmin
        system: yes
        shell: /sbin/nologin
        home: /var/lib/pgadmin

    - name: Create pgAdmin directories
      file:
        path: "{{ item }}"
        state: directory
        owner: pgadmin
        group: pgadmin
        mode: '0755'
      loop:
        - /var/lib/pgadmin
        - /var/log/pgadmin
        - /usr/lib/pgadmin
        - /usr/lib/pgadmin/web

    - name: Copy pgAdmin config file
      copy:
        dest: /usr/lib/pgadmin/web/config.py
        content: |
          import os
          DATA_DIR = '/var/lib/pgadmin'
          LOG_FILE = '/var/log/pgadmin/pgadmin.log'
          SQLITE_PATH = os.path.join(DATA_DIR, 'pgadmin5.db')
          SESSION_DB_PATH = os.path.join(DATA_DIR, 'sessions')
          STORAGE_DIR = os.path.join(DATA_DIR, 'storage')
          SERVER_MODE = True
          DEFAULT_SERVER = '0.0.0.0'
          DEFAULT_SERVER_PORT = 5050
        mode: '0644'
        owner: pgadmin
        group: pgadmin

    - name: Install pgAdmin5 using pip
      pip:
        name: pgadmin4
        state: present
        extra_args: "--no-cache-dir"  # キャッシュを使用しない
      become: yes  # rootとして実行
      environment:
        PATH: "/usr/local/bin:/usr/bin:/bin:/usr/local/sbin:/usr/sbin"

    - name: Initialize pgAdmin database
      shell: |
        export PYTHONPATH=/usr/lib/pgadmin/web
        python3 -c "
        from pgadmin4.setup import setup_db
        setup_db()
        "
      environment:
        PGADMIN_SETUP_EMAIL: admin@example.com
        PGADMIN_SETUP_PASSWORD: admin123
      become_user: pgadmin
      args:
        creates: /var/lib/pgadmin/pgadmin5.db

    - name: Create pgAdmin service
      copy:
        dest: /etc/systemd/system/pgadmin.service
        content: |
          [Unit]
          Description=pgAdmin 5
          After=network.target

          [Service]
          Type=simple
          User=pgadmin
          Environment="PYTHONPATH=/usr/lib/pgadmin/web"
          Environment="PGADMIN_LISTEN_PORT=5050"
          Environment="PGADMIN_SETUP_EMAIL=admin@example.com"
          Environment="PGADMIN_SETUP_PASSWORD=admin123"
          ExecStart=/usr/local/bin/pgadmin4
          Restart=always

          [Install]
          WantedBy=multi-user.target
        mode: '0644'

    - name: Start and enable pgAdmin service
      systemd:
        name: pgadmin
        state: started
        enabled: yes
        daemon_reload: yes

    - name: Restart Nginx
      systemd:
        name: nginx
        state: restarted

    # Final Check
    - name: Check PostgreSQL databases
      become_user: postgres
      environment:
        PGPASSWORD: "{{ db_password }}"
      shell: |
        psql -U {{ db_user }} -c "\l"
      register: db_list
      changed_when: false
